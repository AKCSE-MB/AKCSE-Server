name: build_and_push

on:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up database resource
        env:
          POSTGRES_PASSWORD: postgres
          HOST: localhost
          POSTGRES_USER: postgsres
          PORT: 5435
        run: |
          cd docker
          docker compose up -d
          until PGPASSWORD=$POSTGRES_PASSWORD psql -h $HOST -p $PORT -U $POSTGRES_USER -c '\q'; do
            >&2 echo "Postgres is unavailable - sleeping"
            sleep 1
          done
          cd ..

      - name: Change Env variables
        run: |
          echo DATABASE_URL=\"postgresql://postgres:postgres@localhost:5435/akcse\" > .env

      - name: Install dependencies
        run: |
          npm ci
      - name: Run tests
        run: |
          cp .env.sample .env
          npx prisma migrate deploy
          npx prisma generate
          npm run test:seq

  build_and_push:
    if: success()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: inject env
        run: |
          echo "ENV=prod" > .env
          echo "API_SERVER_URL=${{ secrets.API_SERVER_DEV_URL }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_DEV_URL }}" >> .env
          echo "API_SERVER_PORT=${{ secrets.API_SERVER_DEV_PORT }}" >> .env
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_DEV_SECRET }}" >> .env
          echo "ACCESS_TOKEN_EXPIRED_AT=${{ secrets.ACCESS_TOKEN_DEV_EXPIRED_AT }}" >> .env
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_DEV_SECRET }}" >> .env
          echo "REFRESH_TOKEN_EXPIRED_AT=${{ secrets.REFRESH_TOKEN_DEV_EXPIRED_AT }}" >> .env
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          REPOSITORY: akcse-server
          IMAGE_TAG: latest
        run: |
          docker build -f docker/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
